<?xml version="1.0" encoding="utf-8" ?>

<!--
    参考链接：
    link:http://webinglin.github.io/2015/06/04/Logback-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/
    link:http://aub.iteye.com/blog/1101222
    link:http://my.oschina.net/xianggao/blog/522590?p=%7B%7BtotalPage%7D%7D
    link:http://aub.iteye.com/blog/1101260
-->
<!--
    configuration: 为logback.xml配置文件的根节点,具有属性 scan,scanPeriod,debug
    scan:    当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false
-->
<configuration debug="false">

    <!--contextName 表示工程的名称，唯一值-->
    <contextName>study-logback</contextName>

    <!--property 节点用来定义变量值，具有两个属性，name和value，后续的配置中可以通过 ${var} 来引用在property中定义的变量-->
    <property name="LOG_HOME" value="d://logs/"/>

    <!--
    appender 是的子节点，负责写日志的组件，具备如下属性:
        name: appender的名称
        class: appender全限定名
    -->

    <!--输出到控制台-->
    <!--
    ConsoleAppender 子节点：
    encoder: 对日志进行格式化
    target: System.out 或者 System.err默认为System.out
    全路径：ch.qos.logback.core.ConsoleAppender
    -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoder默认配置为PartternLayoutEncoder    -->
        <encoder  class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %caller{1} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator> <!-- defaults to type ch.qos.logback.classic.boolex.JaninoEventEvaluator -->
                <expression>logger.contains("other")</expression>
            </evaluator>
            <OnMismatch>NEUTRAL</OnMismatch>
            <OnMatch>DENY</OnMatch>
        </filter>
    </appender>

    <!--文件输出-->
    <!--
        FileAppender 将日志文件写到文件中
        file: 被写入的文件名，相对目录或者绝对目录，如果上级目录不存在会自动创建，无默认值
        append: 如果为true，末尾追加。  如果为false，清空现有文件
        encoder: 格式化
        prudent: 如果为true，日志会被安全的写入文件，效率低   默认为false
        全路径：ch.qos.logback.core.FileAppender
    -->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>${LOG_HOME}/myLog.log</file>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!-- 过滤掉 TRACE 和 DEBUG 级别的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <!--
        RollingFileAppender:
        滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：
        <file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
        <append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
        <encoder>：对记录事件进行格式化。（具体参数稍后讲解 ）
        <rollingPolicy>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。
        <triggeringPolicy >: 告知 RollingFileAppender 合适激活滚动。
        <prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。

        rollingPolicy：
            TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：
            <fileNamePattern>:
            必要节点，包含文件名及“%d”转换符， “%d”可以包含一个 java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd。 RollingFileAppender 的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。

            <maxHistory>:
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且 <maxHistory>是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。


            FixedWindowRollingPolicy： 根据固定窗口算法重命名文件的滚动策略。有以下子节点：
            <minIndex>:窗口索引最小值
            <maxIndex>:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。
            <fileNamePattern >:
            必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip

       triggeringPolicy:
            SizeBasedTriggeringPolicy： 查看当前活动文件的大小，如果超过指定大小会告知 RollingFileAppender 触发当前活动文件滚动。只有一个节点:
            <maxFileSize>:这是活动文件的大小，默认值是10MB。
    -->
    <appender name="ROLLINGFILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <!--<MaxHistory>30</MaxHistory>-->
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!-- 日志异步到数据库 -->
<!--    <appender name="DB" class="ch.qos.logback.classic.db.DBAppender">
        <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
            <dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">
                <driverClass>com.mysql.jdbc.Driver</driverClass>
                <url>jdbc:mysql://127.0.0.1:3306/test</url>
                <user>root</user>
                <password>root</password>
            </dataSource>
        </connectionSource>
    </appender>-->

    <!--
        logger 用来设置某一个包或者某一个类的日志打印级别，以及指定

        name: 用来指定受此logger约束的某一个包或者某一个类
        level: 用来设定打印机别. TRACE < DEBUG < INFO < WARN < ERROR
        additivity: 默认为true，将此loger的打印信息向上级传递；
        <logger>可以包含0到多个 <appender-ref>
        对于

        <logger name="com.piedra.logback" level="WARN">
            <appender-ref ref="FILE"/>
        </logger>
        这个logger来说，指定了com.piedra.logback这个包的日志级别为WARN，appender-ref为FILE，并且additivity默认为true，
        表示向上级传递。所以，当Test类记录日志的时候，调用error方法的日志会被输出到FILE的Appender中，并且向上传递到root logger。
        因为root logger为ERROR的日志级别，所以，也会将信息输出到STDOUT和ROLLINGFILE这两个Appender中。
      -->

    <!--root 也是元素,但是它是根logger。只有一个level属性。因为已经被命名为为root-->

    <logger name="xyz.mrwood.study.TestLog" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>

    <logger name="other" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
        <!--<appender-ref ref="DB" />-->
    </logger>

    <root level="DEBUG">
        <appender-ref ref="STDOUT" />
    </root>
</configuration>
